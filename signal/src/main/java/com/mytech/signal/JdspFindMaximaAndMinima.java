package com.mytech.signal;

import java.io.FileReader;
import java.util.Arrays;
import java.util.stream.Collectors;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

import com.github.psambit9791.jdsp.filter.Butterworth;
import com.github.psambit9791.jdsp.signal.peaks.FindPeak;
import com.github.psambit9791.jdsp.signal.peaks.Peak;

public class JdspFindMaximaAndMinima {

	private static double[] filter = { 1505031, 1505068, 1504825, 1504793, 1504540, 1504586, 1504369, 1504261, 1503950,
			1503809, 1503347, 1503192, 1502707, 1502414, 1502115, 1502054, 1501800, 1501777, 1501717, 1501777, 1501808,
			1501914, 1501900, 1502068, 1501993, 1502106, 1502045, 1502081, 1502001, 1501989, 1501843, 1501881, 1501730,
			1501685, 1501487, 1501568, 1501431, 1501304, 1501181, 1501226, 1501062, 1501148, 1500899, 1500800, 1500447,
			1500418, 1500123, 1500144, 1499781, 1499722, 1499444, 1499291, 1499247, 1499022, 1498899, 1498626, 1498403,
			1498407, 1498218, 1498327, 1498222, 1498023, 1497797, 1497913, 1497766, 1497510, 1497264, 1497153, 1497127,
			1497263, 1497445, 1497634, 1497966, 1498295, 1498938, 1499650, 1500364, 1500738, 1500987, 1501324, 1501406,
			1501528, 1501481, 1501620, 1501587, 1501583, 1501359, 1501175, 1500914, 1500785, 1500618, 1500546, 1500562,
			1500429, 1500366, 1500268, 1500226, 1500149, 1500049, 1499943, 1500028, 1499882, 1500005, 1499747, 1499817,
			1499692, 1499707, 1499590, 1499700, 1499657, 1499632, 1499413, 1499468, 1499285, 1499422, 1499112, 1499146,
			1498777, 1498871, 1498334, 1498491, 1498036, 1498094, 1497625, 1497738, 1497381, 1497433, 1496850, 1497215,
			1496671, 1497015, 1496448, 1496796, 1496245, 1496611, 1495837, 1496290, 1495625, 1496117, 1495461, 1495921,
			1495175, 1495632, 1494815, 1495397, 1494515, 1495040, 1494233, 1494727, 1493861, 1494512, 1493459, 1493896,
			1492982, 1493428, 1492364, 1492667, 1491907, 1492262, 1491437, 1491865, 1490833, 1491116, 1490086, 1490339,
			1489448, 1489828, 1488943, 1489565, 1489045, 1489692, 1489349, 1490115, 1489605, 1490350, 1489798, 1490569,
			1489909, 1490347, 1489569, 1490044, 1489152, 1489698, 1488900, 1489305, 1488607, 1488943, 1488033, 1488446,
			1487686, 1487941, 1487042, 1487419, 1486673, 1487149, 1486469, 1486896, 1486284, 1486773, 1486196, 1486761,
			1486052, 1486594, 1485956, 1486474, 1485717, 1486196, 1485486, 1486008, 1485293, 1485814, 1485213, 1485656,
			1485048, 1485610, 1485105, 1485759, 1485134, 1485835, 1485252, 1486021, 1485441, 1486279, 1485782, 1486631,
			1486217, 1486993, 1486523, 1487142, 1486596, 1487189, 1486621, 1487152, 1486402, 1486795, 1485941, 1486521,
			1485845, 1486418, 1485863, 1486692, 1486381, 1487150, 1486728, 1487450, 1486885, 1487455, 1486861, 1487323,
			1486699, 1487250, 1486693, 1487192, 1486586, 1486977, 1486391, 1486736, 1485995, 1486348, 1485608, 1486189,
			1485717, 1486430, 1485782, 1486432, 1485738, 1486450, 1485843, 1486435, 1485626, 1486183, 1485367, 1485864,
			1484955, 1485511, 1484724, 1485472, 1484770, 1485692, 1485063, 1485837, 1484951, 1485823, 1485080, 1485989,
			1485195, 1486102, 1485333, 1486171, 1485450, 1486267, 1485490, 1486220, 1485497, 1486379, 1485432, 1486115,
			1485084, 1485628, 1484471, 1484628, 1483200, 1483368, 1481944, 1482248, 1481155, 1481639, 1480612, 1481333,
			1480257, 1481031, 1480135, 1480761, 1479722, 1480235, 1479099, 1479596, 1478606, 1479399, 1478855, 1479972,
			1479844, 1480996, 1480632, 1481624, 1481159, 1482135, 1481740, 1482973, 1482864, 1484486, 1484633, 1486316,
			1486546, 1488131, 1488501, 1490429, 1490814, 1492170, 1491800, 1492846, 1492407, 1493325, 1492937, 1493974,
			1493606, 1494542, 1494035, 1494816, 1494239, 1494843, 1494201, 1494814, 1494173, 1494799, 1494145, 1494893,
			1494333, 1495167, 1494665, 1495478, 1494946, 1495757, 1495167, 1495846, 1494897, 1494930, 1493503, 1493223,
			1491859, 1491959, 1490959, 1491203, 1490397, 1490748, 1490191, 1490758, 1490467, 1491156, 1490807, 1491447,
			1491083, 1491795, 1491454, 1491976, 1491599, 1492251, 1492121, 1492818, 1492550, 1493285, 1493084, 1493665,
			1493323, 1493668, 1493189, 1493343, 1492731, 1492951, 1492382, 1492791, 1492327, 1492921, 1492473, 1493124,
			1492680, 1493299, 1492736, 1493396, 1492716, 1493473, 1492764, 1493501, 1492727, 1493439, 1492576, 1493315,
			1492515, 1493125, 1492066, 1492386, 1491465, 1492129, 1491206, 1491830, 1490786, 1491426, 1490378, 1491019,
			1489966, 1490640, 1489552, 1490152, 1489177, 1489712, 1488529, 1488857, 1487340, 1487410, 1485629, 1485647,
			1484124, 1484346, 1483088, 1483652, 1482727, 1483381, 1482463, 1483203, 1482310, 1483038, 1482124, 1482852,
			1481931, 1482755, 1481924, 1482762, 1482058, 1482963, 1482180, 1482909, 1482220, 1483025, 1482283, 1482978,
			1482251, 1482834, 1482140, 1482709, 1481880, 1482395, 1481705, 1482312, 1481523, 1482104, 1481456, 1482095,
			1481391, 1481976, 1481387, 1481992, 1481302, 1481838, 1481249, 1481896, 1481235, 1481839, 1481243, 1481927,
			1481407, 1482278, 1481773, 1482586, 1482070, 1482857, 1482349, 1482946, 1482337, 1482937, 1482484, 1483084,
			1482604, 1483358, 1482753, 1483314, 1482494, 1482726, 1481510, 1481132, 1479594, 1479366, 1478382, 1478412,
			1477777, 1478209, 1477770, 1478364, 1477943, 1478631, 1478257, 1478715, 1478384, 1478819, 1478385, 1478859,
			1478487, 1478782, 1478550, 1478989, 1478868, 1479454, 1479152, 1479733, 1479507, 1480151, 1479786, 1480486,
			1480000, 1480461, 1479957, 1480589, 1480089, 1480876, 1480396, 1481110, 1480665, 1481474, 1480799, 1481694,
			1480895, 1481627, 1480794, 1481462, 1480513, 1481221, 1480276, 1480985, 1480032, 1480840, 1479965, 1480731,
			1479921, 1480704, 1479742, 1480660, 1479918, 1480789, 1480104, 1480886, 1480088, 1480851, 1479856, 1480604,
			1479615, 1480258, 1479054, 1479258, 1477737, 1477802, 1476435, 1476909, 1475787, 1476632, 1475728, 1476786,
			1476180, 1477086, 1476285, 1477319, 1476761, 1477818, 1477229, 1478063, 1477584, 1478456, 1477765, 1478597,
			1478029, 1478944, 1478450, 1479296, 1478767, 1479542, 1478977, 1479789, 1479093, 1479668, 1478935, 1479436,
			1478704, 1479296, 1478634, 1479374, 1478742, 1479435, 1478744, 1479402, 1478582, 1479291, 1478646, 1479244,
			1478408, 1478967, 1477938, 1478381, 1477675, 1478280, 1477644, 1478518, 1478095, 1478985, 1478406, 1479196,
			1478663, 1479447, 1478653, 1479388, 1478672, 1479274, 1478397, 1478718, 1477466, 1477287, 1475616, 1475478,
			1474330, 1474494, 1473642, 1474260, 1473699, 1474505, 1474124, 1474973, 1474698, 1475627, 1475354, 1476255,
			1476037, 1476871, 1476796, 1477641, 1477502, 1478316, 1478280, 1479127, 1479089, 1480025, 1479736, 1480392,
			1480055, 1480636, 1480447, 1481025, 1480965, 1481435, 1481359, 1481889, 1481865, 1482419, 1482457, 1482964,
			1482980, 1483512, 1483569, 1484042, 1484300, 1484700, 1484693, 1485106, 1485044, 1485247, 1485124, 1485224,
			1484969, 1485108, 1485048, 1485263, 1485312, 1485557, 1485436, 1485554, 1485388, 1485380, 1484891, 1484793,
			1484160, 1483668, 1482636, 1481643, 1480466, 1479758, 1479102, 1478788, 1478557, 1478563, 1478390, 1478570,
			1478534, 1478935, 1478995, 1479559, 1479948, 1480611, 1481233, 1482031, 1482910, 1484082, 1485232, 1486478,
			1487389, 1488172, 1488525, 1488833, 1488731, 1488640, 1488512, 1488279, 1487870, 1487508, 1487042, 1486514,
			1485947, 1485394, 1484853, 1484367, 1483725, 1483378, 1483184, 1483031, 1482920, 1482961, 1483106, 1483361,
			1483682, 1483994, 1484277, 1484627, 1484915, 1485094, 1484989, 1484982, 1485062, 1485200, 1485429, 1485785,
			1486164, 1486278, 1486413, 1486455, 1486511, 1486219, 1485861, 1485298, 1484736, 1483881, 1483061, 1482066,
			1481213, 1480207, 1479648, 1479025, 1478719, 1478293, 1478175, 1477895, 1477979, 1477918, 1478040, 1477962,
			1478153, 1478092, 1478233, 1478022, 1478071, 1477806, 1478129, 1478047, 1478385, 1478298, 1478647, 1478490,
			1478704, 1478292, 1478424, 1477927, 1477959, 1477404, 1477352, 1476647, 1476717, 1475969, 1476037, 1475508,
			1475717, 1474957, 1475335, 1474640, 1474943, 1474280, 1474694, 1474213, 1474919, 1474505, 1475179, 1474716,
			1475424, 1474907, 1475655, 1475237, 1476097, 1475681, 1476518, 1476138, 1476897, 1476356, 1476996, 1476236,
			1476908, 1476099, 1476454, 1475139, 1474884, 1473094, 1472753, 1471307, 1471450, 1470473, 1470910, 1470256,
			1470840, 1470146, 1470976, 1470509, 1471213, 1470723, 1471490, 1470994, 1471688, 1471199, 1471932, 1471473,
			1472194, 1471660, 1472509, 1472008, 1472967, 1472618, 1473603, 1473214, 1473969, 1473420, 1473977, 1473469,
			1474017, 1473612, 1474346, 1473947, 1474689, 1474278, 1475046, 1474640, 1475324, 1474963, 1475521, 1475050,
			1475660, 1475267, 1475883, 1475244, 1475804, 1475218, 1475567, 1474881, 1475227, 1474479, 1474878, 1474082,
			1474444, 1473677, 1474097, 1473297, 1473728, 1473080, 1473506, 1472769, 1473290, 1472523, 1472571, 1471137,
			1470782, 1469087, 1468848, 1467629, 1467564, 1466468, 1466675, 1465870, 1466350, 1465855, 1466354, 1465961,
			1466518, 1466017, 1466632, 1466283, 1466953, 1466465, 1467042, 1466443, 1467023, 1466582, 1467333, 1467040,
			1467783, 1467537, 1468256, 1468033, 1468639, 1468129, 1468516, 1468005, 1468428, 1468001, 1468489, 1468219,
			1468940, 1468614, 1469268, 1468860, 1469528, 1469069, 1469804, 1469186, 1469793, 1469101, 1469805, 1469087,
			1469918, 1469304, 1470187, 1469485, 1470402, 1470008, 1472343, 1473465, 1474897, 1475012, 1476717, 1476798,
			1478461, 1478401, 1480196, 1480289, 1482041, 1482119, 1483891, 1483726, 1485173, 1484842, 1485918, 1485182,
			1486010, 1485216, 1486269, 1485975, 1487281, 1487062, 1488374, 1488297, 1489735, 1489550, 1490934, 1490463,
			1491577, 1491058, 1492059, 1491614, 1492533, 1491789, 1492877, 1492409 };

	public static int[] argrelmax(double... signal) {
		FindPeak findPeak = new FindPeak(signal);
		int[] maxRes = findPeak.detectRelativeMaxima();
		System.out.print("argrelmax :" + Arrays.stream(maxRes).boxed().collect(Collectors.toList()));
		return maxRes;
	}

	public static int[] argrelmin(double... signal) {
		FindPeak findPeak = new FindPeak(signal);
		int[] minRes = findPeak.detectRelativeMinima();
		System.out.print("\nargrelmin :" + Arrays.stream(minRes).boxed().collect(Collectors.toList()));
		return minRes;
	}

	public static int[] find_peaks(double... signal) {

		double[] negateVal = new double[signal.length];
		for (int i = 0; i < signal.length; i++) {
			negateVal[i] = (signal[i] * -1);
		}

		// get Absolute value
		double[] arrAbsSignal = new double[signal.length];
		for (int i = 0; i < signal.length; i++) {
			arrAbsSignal[i] = Math.abs(signal[i]);
		}
		Arrays.sort(arrAbsSignal);
		int len = arrAbsSignal.length;
		double res;

		// get Median
		if ((len % 2) != 0) {
			res = (double) arrAbsSignal[len / 2];
		} else {
			res = (double) (arrAbsSignal[(len - 1) / 2] + arrAbsSignal[len / 2]) / 2.0;
		}

		double proMdn = (res) * 2 - 50;
		FindPeak findPeak = new FindPeak(negateVal);
		Peak peak = findPeak.detectPeaks();
		int[] peaksArr = peak.getPeaks();
		int[] mediunArr = peak.filterByProminence(peaksArr, proMdn, null);
		System.out.print("\nfilterByProminence :" + Arrays.stream(mediunArr).boxed().collect(Collectors.toList()));
		return mediunArr;
	}

	public static double[] lowPassFilter(double... signal) {
		Butterworth flt1 = new Butterworth(filter, 4);
		double[] lowPassFilterRes = flt1.lowPassFilter(4, 5);
		System.out.println("\n\n\n\n===========High Pass Filters\n");
		Arrays.stream(lowPassFilterRes).forEach(System.out::println);
		return lowPassFilterRes;
	}

	public static double[] highPassFilter(double... signal) {
		Butterworth flt1 = new Butterworth(signal, 0.6);
		double[] highPassFilterRes = flt1.highPassFilter(4, 29);
		System.out.println("\n\n\n\n===========High Pass Filters\n");
		Arrays.stream(highPassFilterRes).forEach(System.out::println);
		return highPassFilterRes;
	}

	public static void main(String[] args) {
		// Get Input From JSON file .....
		JSONParser parser = new JSONParser();
		double[] signal = null;
		try {
			JSONObject jsonObject = (JSONObject) parser.parse(new FileReader("signal_input\\1_1.json"));
			JSONObject jsonChildObject = (JSONObject) jsonObject.get("AC");
			JSONArray jsonArray = (JSONArray) jsonChildObject.get("signal");
			signal = new double[jsonArray.size()];
			for (int i = 0; i < jsonArray.size(); i++) {
				signal[i] = Double.parseDouble(jsonArray.get(i).toString());
			}
			// Find Peaks....
			JdspFindMaximaAndMinima.argrelmax(signal);
			JdspFindMaximaAndMinima.argrelmin(signal);
			JdspFindMaximaAndMinima.find_peaks(signal);
			// Filters
			JdspFindMaximaAndMinima.lowPassFilter(filter);
			JdspFindMaximaAndMinima.highPassFilter(filter);
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

}
